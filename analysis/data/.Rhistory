length(testttt$subject) #76 chose moh, 33 chose exh
# Kruskal-Wallis chi-squared = 21.679, df = 1, p-value = 3.223e-06
testttt = shoesms %>%
filter(Chosen %in% c("1")) %>%
filter(ResponseType %in% c("mention_some_high"))
length(testttt$subject) #76 chose moh, 33 chose exh
length(unique(shoesmo$subject))
length(unique(testttt$subject)) #76 chose moh, 33 chose exh, 62 chose msh
# Kruskal-Wallis chi-squared = 21.679, df = 1, p-value = 3.223e-06
testttt = dchosen %>%
filter(Chosen %in% c("1")) %>%
filter(ResponseType %in% c("mention_some_high"))
length(unique(testttt$subject)) #76 chose moh, 33 chose exh, 62 chose msh
# Kruskal-Wallis chi-squared = 21.679, df = 1, p-value = 3.223e-06
testttt = dchosen %>%
filter(story %in% c("test_shoes")) %>%
filter(Chosen %in% c("1")) %>%
filter(ResponseType %in% c("mention_some_high"))
length(unique(testttt$subject)) #76 chose moh, 33 chose exh, 62 chose msh
# Kruskal-Wallis chi-squared = 21.679, df = 1, p-value = 3.223e-06
testttt = dchosen %>%
filter(story %in% c("test_shoes")) %>%
filter(Chosen %in% c("1")) %>%
filter(ResponseType %in% c("mention_one_high"))
length(unique(testttt$subject)) #76 chose moh, 33 chose exh, 62 chose msh
# Kruskal-Wallis chi-squared = 21.679, df = 1, p-value = 3.223e-06
testttt = dchosen %>%
filter(story %in% c("test_shoes")) %>%
filter(Chosen %in% c("1")) %>%
filter(ResponseType %in% c("exhaustive"))
length(unique(testttt$subject)) #74 chose moh, 33 chose exh, 62 chose msh
# Kruskal-Wallis chi-squared = 21.679, df = 1, p-value = 3.223e-06
testttt = dseen %>%
filter(story %in% c("test_shoes")) %>%
filter(Seen %in% c("1")) %>%
filter(ResponseType %in% c("exhaustive"))
length(unique(testttt$subject))
# Kruskal-Wallis chi-squared = 21.679, df = 1, p-value = 3.223e-06
testttt = dseen %>%
filter(story %in% c("test_shoes")) %>%
filter(Seen %in% c("1")) %>%
filter(ResponseType %in% c("mention_one_high"))
length(unique(testttt$subject))
# Kruskal-Wallis chi-squared = 21.679, df = 1, p-value = 3.223e-06
testttt = dseen %>%
filter(story %in% c("test_shoes")) %>%
filter(Seen %in% c("1")) %>%
filter(ResponseType %in% c("mention_some_high"))
length(unique(testttt$subject))
74/120
33/62
62/116
#differences per story
ggplot(dchosen %>% filter(Chosen == 1), aes(ResponseType)) +
geom_histogram(stat="count",position="dodge") +
coord_flip() +
facet_wrap(~story)
View(subb)
agr = dd %>%
group_by(subject,story) %>%
summarize(propChosen=sum(Chosen)/sum(Seen)) %>%
group_by(subject) %>%
summarize(MeanChosen=mean(SumChosen),CILow=ci.low(SumChosen),CIHigh=ci.high(SumChosen)) %>%
ungroup() %>%
mutate(YMin=MeanChosen-CILow,YMax=MeanChosen+CIHigh)
View(dd)
agr = dd %>%
group_by(ResponseType,story) %>%
summarize(propChosen=sum(Chosen)/sum(Seen)) %>%
group_by(subject) %>%
summarize(MeanChosen=mean(SumChosen),CILow=ci.low(SumChosen),CIHigh=ci.high(SumChosen)) %>%
ungroup() %>%
mutate(YMin=MeanChosen-CILow,YMax=MeanChosen+CIHigh)
agr = dd %>%
group_by(subject,ResponseType,story) %>%
summarize(propChosen=sum(Chosen)/sum(Seen)) %>%
group_by(subject) %>%
summarize(MeanChosen=mean(propChosen),CILow=ci.low(propChosen),CIHigh=ci.high(propChosen)) %>%
ungroup() %>%
mutate(YMin=MeanChosen-CILow,YMax=MeanChosen+CIHigh)
View(agr)
agr = dd %>%
group_by(ResponseType,story) %>%
summarize(propChosen=sum(Chosen)/sum(Seen)) %>%
group_by(story) %>%
summarize(MeanChosen=mean(propChosen),CILow=ci.low(propChosen),CIHigh=ci.high(propChosen)) %>%
ungroup() %>%
mutate(YMin=MeanChosen-CILow,YMax=MeanChosen+CIHigh)
View(agr)
agr = dd %>%
group_by(ResponseType,story) %>%
summarize(propChosen=sum(Chosen)/sum(Seen)) %>%
# group_by(story) %>%
# summarize(MeanChosen=mean(propChosen),CILow=ci.low(propChosen),CIHigh=ci.high(propChosen)) %>%
ungroup()
View(agr)
ggplot(agr, aes(ResponseType), fill=story)
ggplot(agr, aes(ResponseType))+
facet_wrap(~story)
agr2 = dd %>%
group_by(ResponseType,story) %>%
summarize(propChosen=sum(Chosen)/sum(Seen)) %>%
# group_by(story) %>%
# summarize(MeanChosen=mean(propChosen),CILow=ci.low(propChosen),CIHigh=ci.high(propChosen)) %>%
ungroup()
ggplot(agr2, aes(ResponseType,y=propChosen))+
geom_bar(position=dodge,stat="identity") +
facet_wrap(~story)
# mutate(YMin=MeanChosen-CILow,YMax=MeanChosen+CIHigh)
agr2 = subset(agr2, agr2$ResponseType~="false_report")
# mutate(YMin=MeanChosen-CILow,YMax=MeanChosen+CIHigh)
agr2 = subset(agr2, agr2$ResponseType!="false_report")
ggplot(agr2, aes(ResponseType,y=propChosen))+
geom_bar(position=dodge,stat="identity") +
facet_wrap(~story)
# THIS IS THE BEST GRAPH!
ggplot(agr2, aes(ResponseType,y=propChosen)) +
geom_bar(position=dodge,stat="identity") +
facet_wrap(~story) +
ylim(0,1)
ggplot(agr2, aes(ResponseType,y=propChosen)) +
geom_bar(position=dodge,stat="identity") +
# facet_wrap(~story) +
ylim(0,1)
# THIS IS THE BEST GRAPH!
ggplot(agr2, aes(ResponseType,y=propChosen)) +
# geom_bar(position=dodge,stat="identity") +
geom_boxplot() +
facet_wrap(~story) +
ylim(0,1)
# theme_set(theme_grey())
# View(new)
# box plot
new %>%
filter(., Chosen!=0, Seen!=0) %>%
mutate(., proportion = SumChosen / SumSeen) %>%
ggplot(., aes(ResponseType, y=proportion)) +
# geom_boxplot() +
geom_bar(position=dodge,stat="identity") +
# scale_fill_grey() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
facet_wrap(~story) +
ylab("Proportion chosen") +
xlab("AnswerType") +
# theme(axis.text=element_text(size=14),
#       axis.title=element_text(size=18),
#       legend.text=element_text(size=14)) +
ylim(0,1)
# theme_set(theme_grey())
# View(new)
# box plot
new %>%
filter(., Chosen!=0, Seen!=0) %>%
mutate(., proportion = SumChosen / SumSeen) %>%
ggplot(., aes(ResponseType, y=proportion)) +
# geom_boxplot() +
geom_bar(position=dodge,stat="identity") +
# scale_fill_grey() +
# geom_jitter(shape=16, position=position_jitter(0.2)) +
facet_wrap(~story) +
ylab("Proportion chosen") +
xlab("AnswerType") +
# theme(axis.text=element_text(size=14),
#       axis.title=element_text(size=18),
#       legend.text=element_text(size=14)) +
ylim(0,1)
# theme_set(theme_grey())
# View(new)
# box plot
new %>%
filter(., Chosen!=0, Seen!=0) %>%
mutate(., proportion = SumChosen / SumSeen) %>%
ggplot(., aes(ResponseType, y=proportion)) +
geom_boxplot() +
# geom_bar(position=dodge,stat="identity") +
# scale_fill_grey() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
facet_wrap(~story) +
ylab("Proportion chosen") +
xlab("AnswerType") +
# theme(axis.text=element_text(size=14),
#       axis.title=element_text(size=18),
#       legend.text=element_text(size=14)) +
ylim(0,1)
#Set the working directory to whereever you have your raw data and the "helpers.R" file
setwd("/Users/morganmoyer/Dropbox/morgan_scripts/Stakes/processing/")
source("helpers.R")
#import the filtered CSV into R
a <- read.csv("stakes_easy_nonfin.csv")
#remove non-native
b <- subset(a, a$native_lang!="Chinese")
d <- subset(b, b$native_lang!="English%2C Japanese")
#take a look at the average count of answers seen
dseen = d %>%
filter(trial %in% c("high","low")) %>%
drop_na() %>%
select(subject,story,trial,exhaustive_seen,mention_one_high_seen,mention_one_low_seen,mention_some_high_seen,mention_some_low_seen,false_report_seen,none_of_above_seen) %>%
gather(ResponseTypeSeen,Seen,-subject,-story,-trial) %>%
mutate(ResponseType=gsub("_seen","",ResponseTypeSeen,fixed=T)) %>%
select(-ResponseTypeSeen)
# plot the distribution of the answers seen, out of 1200
ggplot(dseen %>% filter(Seen == 1), aes(ResponseType)) +
geom_histogram(stat="count") +
coord_flip()
#take a look at the distribution by trial
ggplot(dseen %>% filter(Seen == 1), aes(ResponseType)) +
geom_histogram(stat="count") +
facet_wrap(~trial) +
coord_flip()
# Do the same for chosen
dchosen = d %>%
filter(trial %in% c("high","low")) %>%
drop_na() %>%
select(subject,story,trial,exhaustive_chosen,mention_one_high_chosen,mention_one_low_chosen,mention_some_high_chosen,mention_some_low_chosen,false_report_chosen,none_of_above_chosen) %>%
gather(ResponseTypeChosen,Chosen,-subject,-story,-trial,-trial) %>%
mutate(ResponseType=gsub("_chosen","",ResponseTypeChosen,fixed=T)) %>%
select(-ResponseTypeChosen)
#put the two together so that we can take a look at proportions
dd = dseen %>%
left_join(dchosen,by=c("subject","story","trial","ResponseType"))
agr2 = dd %>%
group_by(ResponseType,story) %>%
summarize(propChosen=sum(Chosen)/sum(Seen)) %>%
# group_by(story) %>%
# summarize(MeanChosen=mean(propChosen),CILow=ci.low(propChosen),CIHigh=ci.high(propChosen)) %>%
ungroup()
# mutate(YMin=MeanChosen-CILow,YMax=MeanChosen+CIHigh)
agr2 = subset(agr2, agr2$ResponseType!="false_report")
# THIS IS THE BEST GRAPH!
ggplot(agr2, aes(ResponseType,y=propChosen)) +
geom_bar(position=dodge,stat="identity") +
# geom_boxplot() +
facet_wrap(~story) +
ylim(0,1)
# mutate(YMin=MeanChosen-CILow,YMax=MeanChosen+CIHigh)
agr2 = subset(agr2, agr2$ResponseType!="false_report" | agr2$ResponseType!="none_of_the_above")
# THIS IS THE BEST GRAPH!
ggplot(agr2, aes(ResponseType,y=propChosen)) +
geom_bar(position=dodge,stat="identity") +
# geom_boxplot() +
facet_wrap(~story) +
ylim(0,1)
View(agr2)
# mutate(YMin=MeanChosen-CILow,YMax=MeanChosen+CIHigh)
agr2 = subset(agr2, agr2$ResponseType!="false_report" | agr2$ResponseType!="none_of_above")
# THIS IS THE BEST GRAPH!
ggplot(agr2, aes(ResponseType,y=propChosen)) +
geom_bar(position=dodge,stat="identity") +
# geom_boxplot() +
facet_wrap(~story) +
ylim(0,1)
agr2 = subset(agr2, agr2$ResponseType!="none_of_above")
# THIS IS THE BEST GRAPH!
ggplot(agr2, aes(ResponseType,y=propChosen)) +
geom_bar(position=dodge,stat="identity") +
# geom_boxplot() +
facet_wrap(~story) +
ylim(0,1)
#Set the working directory to whereever you have your raw data and the "helpers.R" file
setwd("/Users/morganmoyer/Dropbox/morgan_scripts/Stakes/processing/")
past <- read.csv("past.csv")
# nrow(past) #1386
sub <- subset(past, past$mention_one_low_seen=="1")
present <- read.csv("present.csv")
#nrow(present) #1372
sub2 <- subset(present, present$mention_one_low_seen=="1")
#make a column with past/present as a factor
past$tense <- "past"
present$tense <- "present"
#bind the two data files together
total <- rbind(past, present)
write.csv(total, "finite_total.csv")
# View(total)
nrow(total) #2758
# to run just the finite data, use the variable call below, and comment out the lines above
total <- read.csv("finite_total.csv")
# View(total)
length(unique(total$subject))
#197
length(unique(total$native_lang))
native <- subset(total, total$native!="Albanian")
native1 <- subset(native, native$native!="Romanian")
native2 <- subset(native1, native1$native!="hindi")
native3 <- subset(native2, native2$native!="Italian")
length(unique(native3$subject)) #193
subb <- subset(native3, native3$mention_one_low_seen=="1")
nrow(subb) #1130
#get AVG count of seen and chosen
dseen = native3 %>%
filter(trial %in% c("test")) %>%
select(subject,story,trial,exhaustive_seen,mention_one_high_seen,mention_one_low_seen,mention_some_high_seen,mention_some_low_seen,false_report_seen,tense) %>%
gather(ResponseTypeSeen,Seen,-subject,-story,-trial,-tense) %>%
mutate(ResponseType=gsub("_seen","",ResponseTypeSeen,fixed=T)) %>%
select(-ResponseTypeSeen)
dchosen = native3 %>%
filter(trial %in% c("test")) %>%
select(subject,story,trial,exhaustive_chosen,mention_one_high_chosen,mention_one_low_chosen,mention_some_high_chosen,mention_some_low_chosen,false_report_chosen,tense) %>%
gather(ResponseTypeChosen,Chosen,-subject,-story,-trial,-trial,-tense) %>%
mutate(ResponseType=gsub("_chosen","",ResponseTypeChosen,fixed=T)) %>%
select(-ResponseTypeChosen)
View(subb)
# add them together
dd = dseen %>%
left_join(dchosen,by=c("subject","story","trial","ResponseType","tense"))
ddnd = subset(dd, dd$story!="test_dentist")
agr2 = dd %>%
group_by(ResponseType,story) %>%
summarize(propChosen=sum(Chosen)/sum(Seen)) %>%
# group_by(story) %>%
# summarize(MeanChosen=mean(propChosen),CILow=ci.low(propChosen),CIHigh=ci.high(propChosen)) %>%
ungroup()
# mutate(YMin=MeanChosen-CILow,YMax=MeanChosen+CIHigh)
agr2 = subset(agr2, agr2$ResponseType!="false_report")
# THIS IS THE BEST GRAPH!
ggplot(agr2, aes(ResponseType,y=propChosen)) +
geom_bar(position=dodge,stat="identity") +
# geom_boxplot() +
facet_wrap(~story) +
ylim(0,1)
# View(dd)
dd = subset(dd, dd$ResponseType!="false_report")
agr2 = dd %>%
group_by(ResponseType,story) %>%
summarize(propChosen=sum(Chosen)/sum(Seen)) %>%
# group_by(story) %>%
# summarize(MeanChosen=mean(propChosen),CILow=ci.low(propChosen),CIHigh=ci.high(propChosen)) %>%
ungroup()
# THIS IS THE BEST GRAPH!
ggplot(agr2, aes(ResponseType,y=propChosen)) +
geom_bar(position=dodge,stat="identity") +
# geom_boxplot() +
facet_wrap(~story) +
ylim(0,1)
#Set the working directory to whereever you have your raw data and the "helpers.R" file
setwd("/Users/morganmoyer/Dropbox/Moyer_research/Embedded_Questions/Dissertation/Experiments/Experiment_1/Data/raw")
source("helpers.R")
b <- read.csv("blue_long.csv")
y <- read.csv("yellow_long.csv")
r <- read.csv("red_long.csv")
g <- read.csv("green_long.csv")
c <- read.csv("cyan_long.csv")
m <- read.csv("magenta_long.csv")
go <- read.csv("goldenrod_long.csv")
o <- read.csv("olive_long.csv")
str(b)
bl = b %>%
gather(response,factors,MST.predict.where.find:MAT.k0w.who.select,factor_key=TRUE) %>%
mutate(list="blue") %>%
mutate(tense="nonfinite")
yl = y %>%
gather(response,factors,MAF.predict.where.find:MATF.k0w.who.select,factor_key=TRUE) %>%
mutate(list="yellow") %>%
mutate(tense="nonfinite")
rl = r %>%
gather(response,factors,MATF.predict.where.find:MAF.k0w.who.select,factor_key=TRUE) %>%
mutate(list="red") %>%
mutate(tense="nonfinite")
gl = g %>%
gather(response,factors,MAT.predict.who.recruit:MST.k0w.who.select,factor_key=TRUE) %>%
mutate(list="green") %>%
mutate(tense="nonfinite")
cl = c %>%
gather(response,factors,MST.predict.where.find:MAT.know.who.select,factor_key=TRUE) %>%
mutate(list="cyan") %>%
select(subject,native_lang,response,factors,list) %>%
mutate(tense="finite")
ml = m %>%
gather(response,factors,MATF.predict.where.find:MAF.k0w.who.select,factor_key=TRUE) %>%
mutate(list="magenta") %>%
mutate(tense="finite")
gol = go %>%
gather(response,factors,MAF.predict.where.find:MATF.k0w.who.select,factor_key=TRUE) %>%
mutate(list="goldenrod") %>%
mutate(tense="finite")
ol = o %>%
gather(response,factors,MAT.predict.where.find:MST.k0w.who.select,factor_key=TRUE) %>%
mutate(list="olive") %>%
mutate(tense="finite")
nrow(bl) #1120
nrow(yl) #960
nrow(rl)#896
nrow(gl) #896
nrow(cl)#800
nrow(ml)#832
nrow(gol)#1088
nrow(ol)#832
total <- rbind(bl,yl,rl,gl,cl,ml,gol,ol)
# nrow(total)
# #remove non-native speakers
tot_nat = subset(total, total$native_lang=="EN")
tot <- read.csv("tot_nat.csv")
tot <- droplevels(tot)
#b <- subset(tot, tot$response=="")
# drop all the empty values
total = tot %>%
drop_na()
# Kruskal-Wallis chi-squared = 22.034, df = 15, p-value = 0.1069
# across mst alone
mst = subset(total, total$context=="MST")
View(mst)
view = mst %>%
filter(emb_verb %in% c("view")) %>%
filter(tense %in% c("finite")) %>%
kruskal.test(response ~ emb_verb, data = f)
view = mst %>%
filter(emb_verb %in% c("view")) %>%
filter(tense %in% c("finite"))
View(view)
kruskal.test(response ~ mat_verb, data = view)
view = mst %>%
filter(emb_verb %in% c("view"))
# filter(tense %in% c("finite"))
kruskal.test(response ~ tense, data = view)
# between the two verbs
# Kruskal-Wallis chi-squared = 0.11422, df = 1, p-value = 0.7354
# between tense
# Kruskal-Wallis chi-squared = 6.4996, df = 1, p-value = 0.01079
hide = mst %>%
filter(emb_verb %in% c("hide")) %>%
filter(tense %in% c("finite"))
kruskal.test(response ~ mat_verb, data = view)
# between the two verbs
# Kruskal-Wallis chi-squared = 0.11422, df = 1, p-value = 0.7354
# between tense
# Kruskal-Wallis chi-squared = 6.4996, df = 1, p-value = 0.01079
hide = mst %>%
filter(emb_verb %in% c("hide"))
# filter(tense %in% c("finite"))
kruskal.test(response ~ tense, data = view)
filter(mat_verb %in% c("predict"))
ask = mst %>%
filter(emb_verb %in% c("ask")) %>%
filter(mat_verb %in% c("predict"))
kruskal.test(response ~ tense, data = ask)
# Kruskal-Wallis chi-squared = 1.3489, df = 1, p-value = 0.2455
call = mst %>%
filter(emb_verb %in% c("call")) %>%
filter(mat_verb %in% c("predict"))
kruskal.test(response ~ tense, data = call)
ask = mst %>%
filter(emb_verb %in% c("ask")) %>%
filter(tense %in% c("finite"))
kruskal.test(response ~ mat_verb, data = ask)
# between the two verbs
# Kruskal-Wallis chi-squared = 0.11422, df = 1, p-value = 0.7354
# between tense
# Kruskal-Wallis chi-squared = 6.4996, df = 1, p-value = 0.01079
hide = mst %>%
filter(emb_verb %in% c("hide"))
# filter(tense %in% c("finite"))
kruskal.test(response ~ tense, data = view)
filter(tense %in% c("finite"))
# between the two verbs
# Kruskal-Wallis chi-squared = 0.11422, df = 1, p-value = 0.7354
# between tense
# Kruskal-Wallis chi-squared = 6.4996, df = 1, p-value = 0.01079
hide = mst %>%
filter(emb_verb %in% c("hide")) %>%
filter(tense %in% c("finite"))
kruskal.test(response ~ mat_verb, data = view)
# between the two verbs
# Kruskal-Wallis chi-squared = 0.11422, df = 1, p-value = 0.7354
# between tense
# Kruskal-Wallis chi-squared = 6.4996, df = 1, p-value = 0.01079
hide = mst %>%
filter(emb_verb %in% c("hide")) %>%
filter(mat_verb %in% c("predict"))
kruskal.test(response ~ tense, data = view)
wilcox.test(response ~ tense, data=view)
# between the two verbs
# Kruskal-Wallis chi-squared = 0.11422, df = 1, p-value = 0.7354
# between tense
# Kruskal-Wallis chi-squared = 6.4996, df = 1, p-value = 0.01079
hide = mst %>%
filter(emb_verb %in% c("hide")) %>%
filter(tense %in% c("finite"))
kruskal.test(response ~ mat_verb, data = view)
length(unique(view))
length(unique(view$subject))
# between the two verbs
# Kruskal-Wallis chi-squared = 0.11422, df = 1, p-value = 0.7354
# between tense
# Kruskal-Wallis chi-squared = 6.4996, df = 1, p-value = 0.01079
hide = mst %>%
filter(emb_verb %in% c("hide")) %>%
filter(mat_verb %in% c("predict"))
length(unique(view$subject)) # 107
# between the two verbs
# Kruskal-Wallis chi-squared = 0.11422, df = 1, p-value = 0.7354
# between tense
# Kruskal-Wallis chi-squared = 6.4996, df = 1, p-value = 0.01079
hide = mst %>%
filter(emb_verb %in% c("hide")) %>%
filter(tense %in% c("nonfinite"))
kruskal.test(response ~ mat_verb, data = view)
ask = mst %>%
filter(emb_verb %in% c("ask")) %>%
filter(tense %in% c("nonfinite"))
kruskal.test(response ~ mat_verb, data = ask)
kruskal.test(response ~ mat_verb, data = hire)
hire = mst %>%
filter(emb_verb %in% c("hire")) %>%
filter(tense %in% c("nonfinite"))
kruskal.test(response ~ mat_verb, data = hire)
hire = mst %>%
filter(emb_verb %in% c("hire")) %>%
filter(tense %in% c("finite"))
kruskal.test(response ~ mat_verb, data = hire)
interview = mst %>%
filter(emb_verb %in% c("interview")) %>%
filter(tense %in% c("nonfinite"))
kruskal.test(response ~ mat_verb, data = interview)
